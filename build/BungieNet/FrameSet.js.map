{"version":3,"sources":["../../src/BungieNet/FrameSet.js"],"names":["FrameSet","maxSize","_arr","_maxSize","_comparer","Symbol","iterator","length","frame","full","push","shift","filter","f","sort","func","fs","_operation","maxLength","ms"],"mappings":";;;;;;;;;;AAAA;;;;;;IAMqBA,Q;;AAEnB;;;AAGA,sBAA0B;AAAA,QAAdC,OAAc,uEAAJ,CAAC,CAAG;;AAAA;;AACxB,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,SAAL,GAAiB,IAAjB;AACD;;AAED;;;;;;;SAIEC,OAAOC,Q;;;;;;4CACA,KAAKJ,I;;;;;;;;;;AAGd;;;;;;;4BAIQ;AACN,WAAKA,IAAL,CAAUK,MAAV,GAAmB,CAAnB;AACD;;AAED;;;;;;;;4BAKQC,K,EAAO;;AAEb,UAAG,KAAKC,IAAR,EAAc;AACZ;AACD;;AAED,WAAKP,IAAL,CAAUQ,IAAV,CAAeF,KAAf;AAED;;AAED;;;;;;;8BAIU;AACR,aAAO,KAAKN,IAAL,CAAUS,KAAV,EAAP;AACD;;AAED;;;;;;;;;AAwDA;;;;;2BAKOH,K,EAAO;AACZ,WAAKN,IAAL,GAAY,KAAKA,IAAL,CAAUU,MAAV,CAAiB;AAAA,eAAKC,MAAML,KAAX;AAAA,OAAjB,CAAZ;AACD;;AAED;;;;;;;;;AAgBA;;;;2BAIO;AACL,WAAKN,IAAL,CAAUY,IAAV,CAAe,KAAKV,SAApB;AACD;;AAED;;;;;;;;2BAKOW,I,EAAM;;AAEX,UAAMC,KAAK,IAAIhB,QAAJ,EAAX;;AAEAgB,SAAGd,IAAH,GAAU,KAAKA,IAAL,CAAUU,MAAV,CAAiBG,IAAjB,CAAV;AACAC,SAAGC,UAAH,GAAgB,KAAKA,UAArB;AACAD,SAAGb,QAAH,GAAc,KAAKA,QAAnB;AACAa,SAAGZ,SAAH,GAAe,KAAKA,SAApB;;AAEA,aAAOY,EAAP;AAED;;;wBArGW;AACV,aAAO,KAAKd,IAAL,CAAU,CAAV,CAAP;AACD;;AAED;;;;;;;wBAIW;AACT,aAAO,KAAKA,IAAL,CAAU,KAAKK,MAAL,GAAc,CAAxB,CAAP;AACD;;AAED;;;;;;;wBAIY;AACV,aAAO,KAAKA,MAAL,KAAgB,CAAvB;AACD;;AAED;;;;;;;wBAIW;AACT,aAAO,KAAKA,MAAL,IAAe,KAAKW,SAA3B;AACD;;AAED;;;;;;;wBAIW;AACT,aAAO,KAAKhB,IAAL,CAAUK,MAAjB;AACD;;AAED;;;;;;;wBAIc;AACZ,aAAO,KAAKJ,QAAZ;AACD;;AAED;;;;;sBAIYgB,E,EAAI;AACd,WAAKhB,QAAL,GAAgBgB,EAAhB;AACD;;;wBAec;AACb,aAAO,KAAKf,SAAZ;AACD;;AAED;;;;;sBAIaW,I,EAAM;AACjB,WAAKX,SAAL,GAAiBW,IAAjB;AACD;;;;;;kBAjIkBf,Q","file":"FrameSet.js","sourcesContent":["/**\r\n * FrameSet\r\n *\r\n * By default, this set will act in FIFO mode. If custom, set the operation\r\n * type to custom and set a comparer function\r\n */\r\nexport default class FrameSet {\r\n\r\n  /**\r\n   * @param {Number} [maxSize = -1] - maximum size of the set, -1 is no limit\r\n   */\r\n  constructor(maxSize = -1) {\r\n    this._arr = [];\r\n    this._maxSize = maxSize;\r\n    this._comparer = null;\r\n  }\r\n\r\n  /**\r\n   * Iterate over the inner array\r\n   * @return {undefined}\r\n   */\r\n  *[Symbol.iterator]() {\r\n    yield* this._arr;\r\n  }\r\n\r\n  /**\r\n   * Clear all items in the set\r\n   * @return {undefined}\r\n   */\r\n  clear() {\r\n    this._arr.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Add an item to the end of the queue\r\n   * @param {Platform.Frame} frame - frame to add\r\n   * @return {undefined}\r\n   */\r\n  enqueue(frame) {\r\n\r\n    if(this.full) {\r\n      return;\r\n    }\r\n\r\n    this._arr.push(frame);\r\n\r\n  }\r\n\r\n  /**\r\n   * Remove and return the item at the front of the set\r\n   * @return {Platform.Frame} frame to return\r\n   */\r\n  dequeue() {\r\n    return this._arr.shift();\r\n  }\r\n\r\n  /**\r\n   * Item at the front of the set\r\n   * @type {Platform.Frame}\r\n   */\r\n  get front() {\r\n    return this._arr[0];\r\n  }\r\n\r\n  /**\r\n   * Item at the back of the set\r\n   * @type {Platform.Frame}\r\n   */\r\n  get back() {\r\n    return this._arr[this.length - 1];\r\n  }\r\n\r\n  /**\r\n   * Whether the set is empty\r\n   * @type {Boolean}\r\n   */\r\n  get empty() {\r\n    return this.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Whether the set is full\r\n   * @type {Boolean}\r\n   */\r\n  get full() {\r\n    return this.length >= this.maxLength;\r\n  }\r\n\r\n  /**\r\n   * Number of items in the set\r\n   * @type {Number}\r\n   */\r\n  get size() {\r\n    return this._arr.length;\r\n  }\r\n\r\n  /**\r\n   * Maximum number of items this set can hold\r\n   * @type {Number}\r\n   */\r\n  get maxSize() {\r\n    return this._maxSize;\r\n  }\r\n\r\n  /**\r\n   * Sets the maximum number of items this set can hold\r\n   * @param {Number} ms - maximum size\r\n   */\r\n  set maxSize(ms) {\r\n    this._maxSize = ms;\r\n  }\r\n\r\n  /**\r\n   * Remove a given frame from the set\r\n   * @param {Platform.Frame} frame - frame to remove\r\n   * @return {undefined}\r\n   */\r\n  remove(frame) {\r\n    this._arr = this._arr.filter(f => f !== frame);\r\n  }\r\n\r\n  /**\r\n   * Comparer function for items\r\n   * @type {Function}\r\n   */\r\n  get comparer() {\r\n    return this._comparer;\r\n  }\r\n\r\n  /**\r\n   * Sets the comparer function for items\r\n   * @param {Function} func - comparer function\r\n   */\r\n  set comparer(func) {\r\n    this._comparer = func;\r\n  }\r\n\r\n  /**\r\n   * Sorts the items in this queue according to the comparer\r\n   * @return {undefined}\r\n   */\r\n  sort() {\r\n    this._arr.sort(this._comparer);\r\n  }\r\n\r\n  /**\r\n   * Filter the set by the given function; return true to keep\r\n   * @param {Function} func - filter function\r\n   * @return {FrameSet} filtered set\r\n   */\r\n  filter(func) {\r\n\r\n    const fs = new FrameSet();\r\n\r\n    fs._arr = this._arr.filter(func);\r\n    fs._operation = this._operation;\r\n    fs._maxSize = this._maxSize;\r\n    fs._comparer = this._comparer;\r\n\r\n    return fs;\r\n\r\n  }\r\n\r\n}\r\n"]}