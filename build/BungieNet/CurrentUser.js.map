{"version":3,"sources":["../../src/BungieNet/CurrentUser.js"],"names":["CurrentUser","Promise","get","then","resolve","reject","getMatching","c","cookies","length","getValue","parseInt","id","arr","exec","str"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;;;;;IAKqBA,W;;;;;;;;;AAEnB;;;;oCAIuB;AACrB,aAAO,IAAIC,OAAJ,CAAY;AAAA;;AAEjB;AACA;AACA,4BACGC,GADH,CACO,WADP,EAEGC,IAFH,CAEQ;AAAA,mBAAMC,QAAQ,IAAR,CAAN;AAAA,WAFR,EAE6B;AAAA,mBAAMA,QAAQ,KAAR,CAAN;AAAA,WAF7B;AAJiB;AAAA,OAAZ,CAAP;AASD;;AAED;;;;;;;6BAIgB;AACd,aAAO,IAAIH,OAAJ,CAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACtC,0BACGC,WADH,CACe;AAAA,iBAAKC,CAAL;AAAA,SADf,EAEGJ,IAFH,CAGI;AAAA,iBAAWC,QAAQI,QAAQC,MAAR,GAAiB,CAAzB,CAAX;AAAA,SAHJ,EAIIJ,MAJJ;AAMD,OAPM,CAAP;AAQD;;AAED;;;;;;;mCAIsB;AACpB;AACA,aAAO,kBAAQK,QAAR,CAAiB,SAAjB,CAAP;AACD;;AAED;;;;;;;sCAIyB;AACvB,aAAO,IAAIT,OAAJ,CAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACtC,0BACGK,QADH,CACY,UADZ,EAEGP,IAFH,CAEQ;AAAA,iBAAMC,QAAQO,SAASC,EAAT,EAAa,EAAb,CAAR,CAAN;AAAA,SAFR,EAEyCP,MAFzC;AAGD,OAJM,CAAP;AAKD;;AAED;;;;;;;+BAIkB;AAChB,aAAO,kBAAQK,QAAR,CAAiB,aAAjB,CAAP;AACD;;AAED;;;;;;;;gCAKmB;AACjB,aAAO,IAAIT,OAAJ,CAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACtC,0BAAQK,QAAR,CAAiB,WAAjB,EAA8BP,IAA9B,CAAmC,eAAO;;AAExC;AACA,cAAMU,MAAM,qBAAqBC,IAArB,CAA0BC,GAA1B,CAAZ;;AAEA;AACA,cAAGF,IAAIJ,MAAJ,IAAc,CAAjB,EAAoB;AAClB,mBAAOL,QAAQS,IAAI,CAAJ,CAAR,CAAP;AACD;;AAED;AACA,iBAAOR,OAAO,IAAP,CAAP;AAED,SAbD,EAaG;AAAA,iBAAMA,OAAO,IAAP,CAAN;AAAA,SAbH;AAcD,OAfM,CAAP;AAgBD;;;;;;kBApFkBL,W","file":"CurrentUser.js","sourcesContent":["import Cookies from \"./Cookies.js\";\r\n\r\n/**\r\n * BungieNet.CurrentUser\r\n *\r\n * Functions specific to the current user or client\r\n */\r\nexport default class CurrentUser {\r\n\r\n  /**\r\n   * Returns a bool for whether the user is signed in based on cookie existence\r\n   * @return {Promise.<Boolean>} bool\r\n   */\r\n  static authenticated() {\r\n    return new Promise(resolve =>\r\n\r\n      //if cookie found, resolve as true\r\n      //if it isn't found, resolve as false\r\n      Cookies\r\n        .get(\"bungleatk\")\r\n        .then(() => resolve(true), () => resolve(false))\r\n\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Whether there is any trace of an existing user\r\n   * @return {Promise.<Cookie[]>} cookie\r\n   */\r\n  static exists() {\r\n    return new Promise((resolve, reject) => {\r\n      Cookies\r\n        .getMatching(c => c)\r\n        .then(\r\n          cookies => resolve(cookies.length > 0),\r\n          reject\r\n        );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the CSRF token for API requests\r\n   * @return {Promise.<String>} string\r\n   */\r\n  static getCsrfToken() {\r\n    //token is the value of the bungled cookie\r\n    return Cookies.getValue(\"bungled\");\r\n  }\r\n\r\n  /**\r\n   * Returns the member id of the current user\r\n   * @return {Promise.<Number>} id\r\n   */\r\n  static getMembershipId() {\r\n    return new Promise((resolve, reject) => {\r\n      Cookies\r\n        .getValue(\"bungleme\")\r\n        .then(id => resolve(parseInt(id, 10)), reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the set bungie.net theme\r\n   * @return {Promise.<String>} theme\r\n   */\r\n  static getTheme() {\r\n    return Cookies.getValue(\"bungletheme\");\r\n  }\r\n\r\n  /**\r\n   * Returns the current user's locale\r\n   * @return {Promise.<String>} resolves with string if successful, otherwise\r\n   * rejected with null\r\n   */\r\n  static getLocale() {\r\n    return new Promise((resolve, reject) => {\r\n      Cookies.getValue(\"bungleloc\").then(str => {\r\n\r\n        //parse the locale from the cookie\r\n        const arr = /&?lc=(.+?)(?:$|&)/i.exec(str);\r\n\r\n        //if successful, resolve it\r\n        if(arr.length >= 1) {\r\n          return resolve(arr[1]);\r\n        }\r\n\r\n        //otherwise reject as unable to find\r\n        return reject(null);\r\n\r\n      }, () => reject(null));\r\n    });\r\n  }\r\n\r\n}\r\n"]}