{"version":3,"sources":["../../src/BungieNet/Cookies.js"],"names":["Cookies","name","Promise","resolve","reject","getMatching","c","then","cookies","length","Error","codes","no_cookie_by_name","predicate","provider","getAll","filter","ex","no_cookie_provider","session","get","cookie","value"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;IAsBqBA,O;;;;;;;;;AAEnB;;;;;wBAKWC,I,EAAM;AACf,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,gBACGK,WADH,CACe;AAAA,iBAAKC,EAAEL,IAAF,KAAWA,IAAhB;AAAA,SADf,EAEGM,IAFH,CAEQ,mBAAW;;AAEf,cAAGC,QAAQC,MAAR,KAAmB,CAAtB,EAAyB;AACvB,mBAAOL,OAAO,IAAI,oBAAUM,KAAd,CACZ,IADY,EAEZ,gBAAMC,KAAN,CAAYC,iBAFA,CAAP,CAAP;AAID;;AAED,iBAAOT,QAAQK,QAAQ,CAAR,CAAR,CAAP;AAED,SAbH,EAaKJ,MAbL;AAcD,OAfM,CAAP;AAgBD;;AAED;;;;;;;;gCAKmBS,S,EAAW;AAC5B,aAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,YAAI;AACFJ,kBAAQc,QAAR,CACGC,MADH,GAEGR,IAFH,CAEQ;AAAA,mBAAWJ,QAAQK,QAAQQ,MAAR,CAAeH,SAAf,CAAR,CAAX;AAAA,WAFR;AAGD,SAJD,CAKA,OAAMI,EAAN,EAAU;AACR,iBAAOb,OAAO,IAAI,oBAAUM,KAAd,CACZ,IADY,EAEZ,gBAAMC,KAAN,CAAYO,kBAFA,CAAP,CAAP;AAID;AAEF,OAdM,CAAP;AAeD;;AAED;;;;;;;wCAI2B;AACzB,aAAOlB,QAAQK,WAAR,CAAoB;AAAA,eAAKC,EAAEa,OAAP;AAAA,OAApB,CAAP;AACD;;AAED;;;;;;;;6BAKgBlB,I,EAAM;AACpB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,gBACGoB,GADH,CACOnB,IADP,EAEGM,IAFH,CAEQ;AAAA,iBAAUJ,QAAQkB,OAAOC,KAAf,CAAV;AAAA,SAFR,EAEyClB,MAFzC;AAGD,OAJM,CAAP;AAKD;;;;;;kBApEkBJ,O;AAsEpB;;AAED;;;;AAIAA,QAAQc,QAAR,GAAmB,IAAnB","file":"Cookies.js","sourcesContent":["\"use strict\";\r\n\r\nimport BungieNet from \"./BungieNet.js\";\r\nimport Error from \"./Error.js\";\r\n\r\n/**\r\n * BungieNet.Cookies\r\n *\r\n * Interface to examine/extract bungie.net cookies from a given cookie\r\n * provider.\r\n *\r\n * A cookie provider must implement at least the following methods:\r\n *\r\n * [public] getAll( void ) : Promise(array of Cookie)\r\n * - return all cookies (*.bungie.net only)\r\n *\r\n *\r\n * Cookie must implement at least the following properties:\r\n *\r\n * name: string\r\n * session: bool\r\n * value: string\r\n *\r\n *\r\n * The cookie provider should be set similar to:\r\n * \tBungieNet.Cookies.provider = new CustomCookieProvider();\r\n */\r\nexport default class Cookies {\r\n\r\n  /**\r\n   * Returns the cookie with the given name\r\n   * @param  {String} name\r\n   * @return {Promise.<Cookie>}\r\n   */\r\n  static get(name) {\r\n    return new Promise((resolve, reject) => {\r\n      Cookies\r\n        .getMatching(c => c.name === name)\r\n        .then(cookies => {\r\n\r\n          if(cookies.length === 0) {\r\n            return reject(new BungieNet.Error(\r\n              null,\r\n              Error.codes.no_cookie_by_name\r\n            ));\r\n          }\r\n\r\n          return resolve(cookies[0]);\r\n\r\n        }, reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns an array of cookies which pass the predicate function\r\n   * @param  {Function} predicate\r\n   * @return {Promise.<Cookie[]>}\r\n   */\r\n  static getMatching(predicate) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      try {\r\n        Cookies.provider\r\n          .getAll()\r\n          .then(cookies => resolve(cookies.filter(predicate)));\r\n      }\r\n      catch(ex) {\r\n        return reject(new BungieNet.Error(\r\n          null,\r\n          Error.codes.no_cookie_provider\r\n        ));\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns an array of session cookies\r\n   * @return {Promise.<Cookie[]>}\r\n   */\r\n  static getSessionCookies() {\r\n    return Cookies.getMatching(c => c.session);\r\n  }\r\n\r\n  /**\r\n   * Returns the value for a given cookie name\r\n   * @param  {String} name - name of cookie\r\n   * @return {Promise.<String>}\r\n   */\r\n  static getValue(name) {\r\n    return new Promise((resolve, reject) => {\r\n      Cookies\r\n        .get(name)\r\n        .then(cookie => resolve(cookie.value), reject);\r\n    });\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * Cookie provider interface\r\n * @type {*}\r\n */\r\nCookies.provider = null;\r\n"]}