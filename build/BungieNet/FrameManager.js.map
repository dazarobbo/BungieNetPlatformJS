{"version":3,"sources":["../../src/BungieNet/FrameManager.js"],"names":["FrameManager","frameSet","_frameSet","filter","f","state","waiting","active","frame","enqueue","remove","waitList","getWaiting","empty","front"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;;;IAGqBA,Y;;AAEnB;;;AAGA,wBAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKC,SAAL,GAAiBD,QAAjB;AACD;;AAED;;;;;;;;;iCAKa;AACX,aAAO,KAAKC,SAAL,CAAeC,MAAf,CAAsB;AAAA,eAAKC,EAAEC,KAAF,KAAY,gBAAMA,KAAN,CAAYC,OAA7B;AAAA,OAAtB,CAAP;AACD;;AAED;;;;;;;;gCAKY;AACV,aAAO,KAAKJ,SAAL,CAAeC,MAAf,CAAsB;AAAA,eAAKC,EAAEC,KAAF,KAAY,gBAAMA,KAAN,CAAYE,MAA7B;AAAA,OAAtB,CAAP;AACD;;AAED;;;;;;;6BAISC,K,EAAO;AACd,WAAKN,SAAL,CAAeO,OAAf,CAAuBD,KAAvB;AACD;;AAED;;;;;;;gCAIYA,K,EAAO;AACjB,WAAKN,SAAL,CAAeQ,MAAf,CAAsBF,KAAtB;AACD;;AAED;;;;;;;+BAIW;;AAET,UAAMG,WAAW,KAAKC,UAAL,EAAjB;;AAEA,UAAGD,SAASE,KAAZ,EAAmB;AACjB,eAAO,IAAP;AACD;;AAED,aAAOF,SAASG,KAAhB;AAED;;;;;;kBAzDkBd,Y","file":"FrameManager.js","sourcesContent":["import Frame from \"./Frame.js\";\r\n\r\n/**\r\n * Controls management over frames within a FrameSet\r\n */\r\nexport default class FrameManager {\r\n\r\n  /**\r\n   * @param {Platform.FrameSet} frameSet - reference to a FrameSet\r\n   */\r\n  constructor(frameSet) {\r\n    this._frameSet = frameSet;\r\n  }\r\n\r\n  /**\r\n   * Generate a FrameSet containing all waiting frames from the inner\r\n   * FrameSet. NOTE: frames within the returned set are mutable!\r\n   * @return {Platform.FrameSet} frames currently waiting\r\n   */\r\n  getWaiting() {\r\n    return this._frameSet.filter(f => f.state === Frame.state.waiting);\r\n  }\r\n\r\n  /**\r\n   * Generate a FrameSet containing all active frames from the inner\r\n   * FrameSet. NOTE: frames within the returned set are mutable!\r\n   * @return {Platform.FrameSet} frames currently active\r\n   */\r\n  getActive() {\r\n    return this._frameSet.filter(f => f.state === Frame.state.active);\r\n  }\r\n\r\n  /**\r\n   * @param {Platform.Frame} frame - frame to add\r\n   * @return {undefined}\r\n   */\r\n  addFrame(frame) {\r\n    this._frameSet.enqueue(frame);\r\n  }\r\n\r\n  /**\r\n   * @param {Platform.Frame} frame - frame to remove\r\n   * @return {undefined}\r\n   */\r\n  removeFrame(frame) {\r\n    this._frameSet.remove(frame);\r\n  }\r\n\r\n  /**\r\n   * Returns the \"next\" waiting frame\r\n   * @return {Promise<Platform.Frame>} the next frame in the wait list\r\n   */\r\n  getFrame() {\r\n\r\n    const waitList = this.getWaiting();\r\n\r\n    if(waitList.empty) {\r\n      return null;\r\n    }\r\n\r\n    return waitList.front;\r\n\r\n  }\r\n\r\n}\r\n"]}