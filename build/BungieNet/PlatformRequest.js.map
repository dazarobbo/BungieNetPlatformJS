{"version":3,"sources":["../../src/BungieNet/PlatformRequest.js"],"names":["PlatformRequest","frame","_networkDebug","_frame","_options","headers","_responseMessage","_responseText","emit","events","beforeSend","target","Promise","resolve","logger","log","frameId","id","status","statusCode","httpSuccess","_onHttpSuccess","then","httpFail","httpDone","parse","_onResponseParsed","r","_onResponseCorrupt","response","responseParsed","_success","_done","_error","error","success","done","uri","request","toString","method","body","data","_beforeSend","__internalBind","line","err","OK","_httpFail","_onHttpDone","_httpSuccess","type"],"mappings":"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","file":"PlatformRequest.js","sourcesContent":["import BungieNet from \"./BungieNet.js\";\r\nimport EventEmitter from \"events\";\r\nimport HttpStatus from \"http-status-codes\";\r\nimport request from \"request\";\r\nimport requestDebug from \"request-debug\";\r\nimport Response from \"./Response\";\r\n\r\n/**\r\n * This class does NOT represent a response from bungie.net. This class exists\r\n * to handle the workflow between making a request and receiving a response.\r\n */\r\nexport default class PlatformRequest extends EventEmitter {\r\n\r\n  /**\r\n   * @param {Platform.Frame} frame -\r\n   */\r\n  constructor(frame) {\r\n\r\n    super();\r\n\r\n    requestDebug(request, this._networkDebug);\r\n\r\n    /**\r\n     * @type {Platform.Frame}\r\n     */\r\n    this._frame = frame;\r\n\r\n    /**\r\n     * request {@link https://github.com/request/request#requestoptions-callback|options}\r\n     * These are applied immediately prior to the request occurring\r\n     * @type {Object}\r\n     */\r\n    this._options = {\r\n      headers: { }\r\n    };\r\n\r\n    /**\r\n     * @type {http.IncomingMessage}\r\n     */\r\n    this._responseMessage = null;\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    this._responseText = null;\r\n\r\n  }\r\n\r\n  /**\r\n   * @return {Frame} frame\r\n   */\r\n  get frame() {\r\n    return this._frame;\r\n  }\r\n\r\n  /**\r\n   * @return {Object} request options\r\n   */\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  /**\r\n   * @param {String} type -\r\n   * @param {Object} data -\r\n   * @param {String} r -\r\n   * @return {undefined}\r\n   */\r\n  static _networkDebug(type, data, r) {\r\n    BungieNet.logger.log(\"verbose\", type, data);\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _beforeSend() {\r\n    this.emit(PlatformRequest.events.beforeSend, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _httpSuccess() {\r\n    return new Promise(resolve => {\r\n\r\n      BungieNet.logger.log(\"info\", \"HTTP Success\", {\r\n        frameId: this._frame.id,\r\n        status: this._responseMessage.statusCode\r\n      });\r\n\r\n      this.emit(PlatformRequest.events.httpSuccess, {\r\n        target: this\r\n      });\r\n\r\n      return this._onHttpSuccess()\r\n        .then(() => resolve());\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _httpFail() {\r\n    BungieNet.logger.log(\"warn\", \"HTTP Failed\", {\r\n      frameId: this._frame.id,\r\n      status: this._responseMessage.statusCode\r\n    });\r\n    this.emit(PlatformRequest.events.httpFail, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _onHttpDone() {\r\n    this.emit(PlatformRequest.events.httpDone, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _onHttpSuccess() {\r\n    return new Promise(resolve => {\r\n      Response\r\n        .parse(this._responseText)\r\n        .then(r => this._onResponseParsed(r), () => this._onResponseCorrupt())\r\n        .then(() => resolve());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {Response} response -\r\n   * @return {undefined}\r\n   */\r\n  _onResponseParsed(response) {\r\n    return new Promise(resolve => {\r\n\r\n      this.frame.response = response;\r\n\r\n      this.emit(PlatformRequest.events.responseParsed, {\r\n        target: this\r\n      });\r\n\r\n      this._success()\r\n        .then(() => this._done());\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _onResponseCorrupt() {\r\n    return new Promise(resolve => {\r\n      this._error()\r\n        .then(() => this._done())\r\n        .then(() => resolve());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _error() {\r\n    this.emit(PlatformRequest.events.error, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _success() {\r\n    this.emit(PlatformRequest.events.success, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  _done() {\r\n    this.emit(PlatformRequest.events.done, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  __internalBind() {\r\n\r\n    //bind all information to the _options object\r\n    this._options.uri = this._frame.request.uri.toString();\r\n    this._options.method = this._frame.request.method;\r\n    this._options.body = this._frame.request.data;\r\n\r\n  }\r\n\r\n  /**\r\n   * @return {undefined}\r\n   */\r\n  execute() {\r\n    this._beforeSend().then(() => {\r\n\r\n      this.__internalBind();\r\n\r\n      BungieNet.logger.log(\"info\", \"Executing request\", {\r\n        frameId: this._frame.id,\r\n        line: `${ this._options.method } ${ this._options.uri }`\r\n      });\r\n\r\n      request(this._options, (err, response, body) => {\r\n\r\n        this._responseMessage = response;\r\n        this._responseText = body;\r\n\r\n        if(err || response.statusCode !== HttpStatus.OK) {\r\n          return this._httpFail()\r\n            .then(() => this._onHttpDone())\r\n            .then(() => this._error())\r\n            .then(() => this._done());\r\n        }\r\n\r\n        return this._httpSuccess()\r\n          .then(() => this._onHttpDone())\r\n          .then(() => this._onHttpSuccess());\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Events generated by a PlatformRequest instance\r\n * @type {Object}\r\n */\r\nPlatformRequest.events = {\r\n\r\n  beforeSend: \"beforeSend\",\r\n\r\n  httpSuccess: \"httpSuccess\",\r\n  httpFail: \"httpFail\",\r\n  httpDone: \"httpDone\",\r\n\r\n  responseParsed: \"responseParsed\",\r\n\r\n  success: \"success\",\r\n  error: \"error\",\r\n  done: \"done\"\r\n\r\n};\r\n"]}