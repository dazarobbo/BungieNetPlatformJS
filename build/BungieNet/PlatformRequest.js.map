{"version":3,"sources":["../../src/BungieNet/PlatformRequest.js"],"names":["PlatformRequest","frame","_networkDebug","_frame","_options","headers","_responseMessage","_responseText","type","data","r","logger","log","emit","events","beforeSend","target","Promise","resolve","frameId","id","status","statusCode","httpSuccess","_onHttpSuccess","then","httpFail","httpDone","parse","_onResponseParsed","_onResponseCorrupt","response","responseParsed","_success","_done","_error","error","success","done","uri","request","toString","method","body","Object","assign","_beforeSend","__internalBind","line","err","_httpFail","_onHttpDone","_httpSuccess"],"mappings":"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","file":"PlatformRequest.js","sourcesContent":["\"use strict\";\r\n\r\nimport BungieNet from \"./BungieNet.js\";\r\nimport EventEmitter from \"events\";\r\nimport request from \"request\";\r\nimport requestDebug from \"request-debug\";\r\nimport Response from \"./Response\";\r\n\r\n/**\r\n * This class does NOT represent a response from bungie.net. This class exists\r\n * to handle the workflow between making a request and receiving a response.\r\n */\r\nexport default class PlatformRequest extends EventEmitter {\r\n\r\n  /**\r\n   * @param {Platform.Frame} frame\r\n   */\r\n  constructor(frame) {\r\n\r\n    super();\r\n\r\n    requestDebug(request, this._networkDebug);\r\n\r\n    /**\r\n     * @type {Platform.Frame}\r\n     */\r\n    this._frame = frame;\r\n\r\n    /**\r\n     * request {@link https://github.com/request/request#requestoptions-callback|options}\r\n     * These are applied immediately prior to the request occurring\r\n     * @type {Object}\r\n     */\r\n    this._options = {\r\n      headers: { }\r\n    };\r\n\r\n    /**\r\n     * @type {http.IncomingMessage}\r\n     */\r\n    this._responseMessage = null;\r\n\r\n    /**\r\n     * @type {String}\r\n     */\r\n    this._responseText = null;\r\n\r\n  }\r\n\r\n  get frame() {\r\n    return this._frame;\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  _networkDebug(type, data, r) {\r\n    BungieNet.logger.log(\"verbose\", type, data);\r\n  }\r\n\r\n  _beforeSend() {\r\n    this.emit(PlatformRequest.events.beforeSend, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  _httpSuccess() {\r\n    return new Promise(resolve => {\r\n\r\n      BungieNet.logger.log(\"info\", \"HTTP Success\", {\r\n        frameId: this._frame.id,\r\n        status: this._responseMessage.statusCode\r\n      });\r\n\r\n      this.emit(PlatformRequest.events.httpSuccess, {\r\n        target: this\r\n      });\r\n\r\n      return this._onHttpSuccess()\r\n        .then(() => resolve());\r\n\r\n    });\r\n  }\r\n\r\n  _httpFail() {\r\n    BungieNet.logger.log(\"warn\", \"HTTP Failed\", {\r\n      frameId: this._frame.id,\r\n      status: this._responseMessage.statusCode\r\n    });\r\n    this.emit(PlatformRequest.events.httpFail, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  _onHttpDone() {\r\n    this.emit(PlatformRequest.events.httpDone, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  _onHttpSuccess() {\r\n    return new Promise(resolve => {\r\n      Response\r\n        .parse(this._responseText)\r\n        .then((r) => this._onResponseParsed(r), () => this._onResponseCorrupt())\r\n        .then(() => resolve());\r\n    });\r\n  }\r\n\r\n  _onResponseParsed(response) {\r\n    return new Promise(resolve => {\r\n\r\n      this.frame.response = response;\r\n\r\n      this.emit(PlatformRequest.events.responseParsed, {\r\n        target: this\r\n      });\r\n\r\n      this._success()\r\n        .then(() => this._done());\r\n\r\n    });\r\n  }\r\n\r\n  _onResponseCorrupt() {\r\n    return new Promise(resolve => {\r\n      this._error()\r\n        .then(() => this._done())\r\n        .then(() => resolve());\r\n    });\r\n  }\r\n\r\n  _error() {\r\n    this.emit(PlatformRequest.events.error, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  _success() {\r\n    this.emit(PlatformRequest.events.success, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  _done() {\r\n    this.emit(PlatformRequest.events.done, {\r\n      target: this\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  __internalBind() {\r\n\r\n    //bind all information to the _options object\r\n    this._options.uri = this._frame.request.uri.toString();\r\n    this._options.method = this._frame.request.method;\r\n    this._options.body = this._frame.request.data;\r\n\r\n    //copy anything not in _options.headers to _options.headers\r\n    //TODO: prefer event callbacks rather than this property\r\n    Object.assign(this._options.headers, this._frame.request.headers);\r\n\r\n  }\r\n\r\n  execute() {\r\n    this._beforeSend().then(() => {\r\n\r\n      this.__internalBind();\r\n\r\n      BungieNet.logger.log(\"info\", \"Executing request\", {\r\n        frameId: this._frame.id,\r\n        line: `${this._options.method} ${this._options.uri}`\r\n      });\r\n\r\n      request(this._options, (err, response, body) => {\r\n\r\n        this._responseMessage = response;\r\n        this._responseText = body;\r\n\r\n        if(err || response.statusCode !== 200) {\r\n          return this._httpFail()\r\n            .then(() => this._onHttpDone())\r\n            .then(() => this._error())\r\n            .then(() => this._done());\r\n        }\r\n\r\n        return this._httpSuccess()\r\n          .then(() => this._onHttpDone())\r\n          .then(() => this._onHttpSuccess());\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * Events generated by a PlatformRequest instance\r\n * @type {Object}\r\n */\r\nPlatformRequest.events = {\r\n\r\n  beforeSend: \"beforeSend\",\r\n\r\n  httpSuccess: \"httpSuccess\",\r\n  httpFail: \"httpFail\",\r\n  httpDone: \"httpDone\",\r\n\r\n  responseParsed: \"responseParsed\",\r\n\r\n  success: \"success\",\r\n  error: \"error\",\r\n  done: \"done\"\r\n\r\n};\r\n"]}