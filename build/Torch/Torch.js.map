{"version":3,"sources":["../../src/Torch/Torch.js"],"names":["Torch","p","_platform","page","Promise","resolve","reject","getConversationsV5","then","convs","resp","response","results","map","c","Conversation","r","detail","m","Message","body","conversationId","dateSent","lastMessageSent","isAutoResponse","isDeleted","memberFromId","messageId","lastMessageId","sender","User","Object","values","users","find","u","membershipId","messages","push","Response","conversations","id","getConversationThread","conv","msg","conversation","getConversationByIdV2"],"mappings":"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","file":"Torch.js","sourcesContent":["\"use strict\";\r\n\r\nimport { Platform } from \"bungienetplatformjs\";\r\n\r\n/**\r\n * BungieNet Platform middleware\r\n */\r\nexport default class Torch {\r\n\r\n  /**\r\n   * @param {Platform} p\r\n   */\r\n  constructor(p) {\r\n    this._platform = p;\r\n  }\r\n\r\n  /**\r\n   * @type {Platform}\r\n   */\r\n  get platform() {\r\n    return this._platform;\r\n  }\r\n\r\n  /**\r\n   * @param {Platform}\r\n   */\r\n  set platform(p) {\r\n    this._platform = p;\r\n  }\r\n\r\n  /**\r\n   * @param  {Number} [page=1]\r\n   * @return {Promise<Torch.Conversation[]>}\r\n   */\r\n  getConversations(page = 1) {\r\n    return new Promise((resolve, reject) => {\r\n      this._platform.getConversationsV5(page).then(resp => {\r\n\r\n        let convs = resp.response.results.map(r => {\r\n\r\n          let c = new Torch.Conversation(r.detail);\r\n\r\n          //create a message object from the initial conversation\r\n          //details and add it as a message of the conversation\r\n          let m = new Torch.Message({\r\n            body: r.detail.body,\r\n            conversationId: r.detail.conversationId,\r\n            dateSent: r.detail.lastMessageSent,\r\n            isAutoResponse: r.detail.isAutoResponse,\r\n            isDeleted: false, //hardcoded!\r\n            memberFromId: r.detail.memberFromId,\r\n            messageId: r.detail.lastMessageId\r\n          });\r\n\r\n          //get user details\r\n          m.sender = new Torch.User(\r\n            Object.values(resp.response.users)\r\n              .find(u => u.membershipId === r.detail.memberFromId)\r\n          );\r\n\r\n          c.messages.push(m);\r\n\r\n          return c;\r\n\r\n        });\r\n\r\n        return resolve(new Torch.Response(\r\n          resp,\r\n          {\r\n            conversations: convs\r\n          }\r\n        ));\r\n\r\n      }, reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param  {String} id\r\n   * @param  {Number} [page=1]\r\n   * @return {Promise.<Torch.Conversation>}\r\n   */\r\n  getConversationThread(id, page = 1) {\r\n    return new Promise((resolve, reject) => {\r\n      this._platform.getConversationThread(id, page).then(resp => {\r\n\r\n        let conv = new Torch.Conversation({\r\n          conversationId: id\r\n        });\r\n\r\n        conv.messages = resp.response.results.map(m => {\r\n\r\n          let msg = new Torch.Message(m);\r\n\r\n          msg.sender = new Torch.User(\r\n            Object.values(resp.response.users)\r\n              .find(u => u.membershipId === m.memberFromId)\r\n          );\r\n\r\n          return msg;\r\n\r\n        });\r\n\r\n        return resolve(new Torch.Response(\r\n          resp,\r\n          {\r\n            conversation: conv\r\n          }\r\n        ));\r\n\r\n      }, reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param  {String} id\r\n   * @return {Promise.<Torch.Response>}\r\n   */\r\n  getConversationById(id) {\r\n    return new Promise((resolve, reject) => {\r\n      this._platform.getConversationByIdV2(id).then(resp => {\r\n\r\n\r\n\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"]}