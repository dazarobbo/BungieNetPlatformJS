{"version":3,"sources":["../../src/Torch/Torch.Util.js"],"names":["Torch","Util","str","document","createElement","appendChild","createTextNode","parentNode","innerHTML","replace","a","textContent","match","dec","String","fromCharCode"],"mappings":";;;;;;AAAA;AACAA,MAAMC,IAAN;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAEE;;;;;AAFF,+BAOoBC,GAPpB,EAOyB;;AAErB,UAAGC,QAAH,EAAa;AACd,eAAOA,SAASC,aAAT,CAAuB,GAAvB,EAA4BC,WAA5B,CACNF,SAASG,cAAT,CAAwBJ,GAAxB,CADM,EACwBK,UADxB,CACmCC,SAD1C;AAEA;;AAED,aAAON,IACLO,OADK,CACG,IADH,EACS,OADT,EAELA,OAFK,CAEG,IAFH,EAES,QAFT,EAGLA,OAHK,CAGG,IAHH,EAGS,OAHT,EAILA,OAJK,CAIG,IAJH,EAIS,MAJT,EAKLA,OALK,CAKG,IALH,EAKS,MALT,CAAP;AAOC;;AAED;;;;;;AAvBF;AAAA;AAAA,+BA4BoBP,GA5BpB,EA4ByB;;AAErB,UAAGC,QAAH,EAAa;AACX,YAAIO,IAAIP,SAASC,aAAT,CAAuB,GAAvB,CAAR,CAAqCM,EAAEF,SAAF,GAAcN,GAAd;AACrC,eAAOQ,EAAEC,WAAT;AACD;;AAED,aAAOT,IACJO,OADI,CACI,WADJ,EACiB,UAACG,KAAD,EAAQC,GAAR,EAAgB;AACpC,eAAOC,OAAOC,YAAP,CAAoBF,GAApB,CAAP;AACD,OAHI,EAIJJ,OAJI,CAII,SAJJ,EAIe,IAJf,EAKJA,OALI,CAKI,SALJ,EAKe,GALf,EAMJA,OANI,CAMI,OANJ,EAMa,GANb,EAOJA,OAPI,CAOI,OAPJ,EAOa,GAPb,EAQJA,OARI,CAQI,QARJ,EAQc,GARd,CAAP;AAUD;AA7CH;;AAAA;AAAA","file":"Torch.Util.js","sourcesContent":["/* globals Torch */\r\nTorch.Util = class {\r\n\r\n  /**\r\n   * HTML encode a string\r\n   * @param {String} str\r\n   * @return {String}\r\n   */\r\n  static htmlEncode(str) {\r\n\r\n    if(document) {\r\n\t\t\treturn document.createElement(\"a\").appendChild(\r\n\t\t\t\tdocument.createTextNode(str)).parentNode.innerHTML;\r\n\t\t}\r\n\r\n\t\treturn str\r\n\t\t\t.replace(/&/g, \"&amp;\")\r\n\t\t\t.replace(/\"/g, \"&quot;\")\r\n\t\t\t.replace(/'/g, \"&#39;\")\r\n\t\t\t.replace(/</g, \"&lt;\")\r\n\t\t\t.replace(/>/g, \"&gt;\");\r\n\r\n  }\r\n\r\n  /**\r\n   * HTML decodes a string\r\n   * @param {String} str\r\n   * @return {String}\r\n   */\r\n  static htmlDecode(str) {\r\n\r\n    if(document) {\r\n      let a = document.createElement(\"s\"); a.innerHTML = str;\r\n      return a.textContent;\r\n    }\r\n\r\n    return str\r\n      .replace(/&#(\\d+);/g, (match, dec) => {\r\n        return String.fromCharCode(dec);\r\n      })\r\n      .replace(/&quot;/g, \"\\\"\")\r\n      .replace(/&apos;/g, \"'\")\r\n      .replace(/&lt;/g, \"<\")\r\n      .replace(/&gt;/g, \">\")\r\n      .replace(/&amp;/g, \"&\");\r\n\r\n  }\r\n\r\n};\r\n"]}