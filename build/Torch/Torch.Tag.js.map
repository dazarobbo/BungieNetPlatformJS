{"version":3,"sources":["../../src/Torch/Torch.Tag.js"],"names":["Torch","Tag","str","_tag","_trim","toLowerCase","toString","trim","replace"],"mappings":";;;;;;AAAA;AACA;;;;;;;;;AASAA,MAAMC,GAAN;;AAEE;;;AAGA,kBAAYC,GAAZ,EAAiB;AAAA;;AACf,SAAKC,IAAL,GAAYH,MAAMC,GAAN,CAAUG,KAAV,CAAgBF,GAAhB,CAAZ;AACD;;AAED;;;;;;;AATF;AAAA;;;AAkCE;;;;AAlCF,+BAsCa;AACT,aAAO,KAAKC,IAAL,CAAUE,WAAV,EAAP;AACD;AAxCH;AAAA;;;AAkBE;;;;AAlBF,wBAsBa;AACT,mBAAW,KAAKC,QAAL,EAAX;AACD;;AAED;;;;;AA1BF;AAAA;AAAA,wBA8BY;AACR,aAAO,KAAKH,IAAZ;AACD;AAhCH;AAAA;AAAA,0BAceD,GAdf,EAcoB;AAChB,aAAOA,IAAIK,IAAJ,GAAWC,OAAX,CAAmB,GAAnB,EAAwB,EAAxB,CAAP;AACD;AAhBH;;AAAA;AAAA","file":"Torch.Tag.js","sourcesContent":["/* globals Torch */\r\n/**\r\n * @example\r\n *\r\n * let t = new Torch.Tag(\"#Bungie\");\r\n *\r\n * t.hash; //#bungie\r\n * t.raw; //Bungie\r\n * t.toString(); //#bungie\r\n */\r\nTorch.Tag = class {\r\n\r\n  /**\r\n   * @param {String} str - string containing a tag or hash tag\r\n   */\r\n  constructor(str) {\r\n    this._tag = Torch.Tag._trim(str);\r\n  }\r\n\r\n  /**\r\n   * Strips excess tag data\r\n   * @param {String} str eg. \"#Bungie\"\r\n   * @return {String}\r\n   */\r\n  static _trim(str) {\r\n    return str.trim().replace(\"#\", \"\");\r\n  }\r\n\r\n  /**\r\n   * Returns the tag as a hash tag\r\n   * @return {String} eg. \"#bungie\"\r\n   */\r\n  get hash() {\r\n    return `#${this.toString()}`;\r\n  }\r\n\r\n  /**\r\n   * The raw, non-normalised tag\r\n   * @return {String} eg. \"Bungie\"\r\n   */\r\n  get raw() {\r\n    return this._tag;\r\n  }\r\n\r\n  /**\r\n   * Normalised version of this tag\r\n   * @return {String} eg. \"#bungie\"\r\n   */\r\n  toString() {\r\n    return this._tag.toLowerCase();\r\n  }\r\n\r\n};\r\n"]}