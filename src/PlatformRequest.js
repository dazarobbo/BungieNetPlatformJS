import BungieNet from "./BungieNet.js";
import EventEmitter from "events";
import HttpStatus from "http-status-codes";
import request from "request";
import Response from "./Response.js";

/**
 * This class does NOT represent a response from bungie.net. This class exists
 * to handle the workflow between making a request and receiving a response.
 */
export default class PlatformRequest extends EventEmitter {

  /**
   * @param {Frame} frame -
   */
  constructor(frame) {

    super();

    /**
     * @type {Frame}
     */
    this._frame = frame;

    /**
     * request {@link https://github.com/request/request#requestoptions-callback|options}
     * These are applied immediately prior to the request occurring
     * @type {Object}
     */
    this._options = {
      headers: { }
    };

    /**
     * @type {http.IncomingMessage}
     */
    this._responseMessage = null;

    /**
     * @type {String}
     */
    this._responseText = null;

    /**
     * @type {String}
     */
    this._errorMessage = null;

  }

  /**
   * @return {Frame} frame
   */
  get frame() {
    return this._frame;
  }

  /**
   * @return {Object} request options
   */
  get options() {
    return this._options;
  }

  /**
   * @return {undefined}
   */
  _beforeSend() {
    this.emit(PlatformRequest.events.beforeSend, {
      target: this
    });
  }

  /**
   * @return {undefined}
   */
  async _httpSuccess() {

    BungieNet.logger.log("info", "HTTP Success", {
      frameId: this._frame.id,
      status: this._responseMessage.statusCode
    });

    this.emit(PlatformRequest.events.httpSuccess, {
      target: this
    });

    await this._onHttpSuccess();

  }

  /**
   * @return {undefined}
   */
  async _httpFail() {

    BungieNet.logger.log("warn", "HTTP Failed", {
      frameId: this._frame.id,
      error: this._errorMessage,
      status: this._responseMessage === undefined
        ? null
        : this._responseMessage.statusCode
    });

    this.emit(PlatformRequest.events.httpFail, {
      target: this
    });

    await this._onHttpDone();
    await this._error();
    await this._done();

  }

  /**
   * @return {undefined}
   */
  _onHttpDone() {
    this.emit(PlatformRequest.events.httpDone, {
      target: this
    });
  }

  /**
   * @return {undefined}
   */
  async _onHttpSuccess() {

    await this._onHttpDone();

    try {
      this.frame.response = await Response.parse(this._responseText);
      await this._onResponseParsed();
    }
    catch(err) {
      await this._onResponseCorrupt();
    }

  }

  /**
   * @return {undefined}
   */
  async _onResponseParsed() {

    this.emit(PlatformRequest.events.responseParsed, {
      target: this
    });

    await this._success();
    await this._done();

  }

  /**
   * @return {undefined}
   */
  async _onResponseCorrupt() {

    this.emit(PlatformRequest.events.responseCorrupt, {
      target: this
    });

    await this._error();
    await this._done();

  }

  /**
   * @return {undefined}
   */
  _error() {
    this.emit(PlatformRequest.events.error, {
      target: this
    });
  }

  /**
   * @return {undefined}
   */
  _success() {
    this.emit(PlatformRequest.events.success, {
      target: this
    });
  }

  /**
   * @return {undefined}
   */
  _done() {
    this.emit(PlatformRequest.events.done, {
      target: this
    });
  }

  /**
   * @return {undefined}
   */
  __internalBind() {
    this._options.uri = this._frame.request.uri.toString();
    this._options.method = this._frame.request.method;
    this._options.body = JSON.stringify(this._frame.request.data);
  }

  /**
   * @return {undefined}
   */
  async execute() {

    await this._beforeSend();
    await this.__internalBind();

    BungieNet.logger.log("info", "Executing request", {
      frameId: this._frame.id,
      line: `${ this._options.method } ${ this._options.uri }`
    });

    request(this._options, async (err, response, body) => {

      this._responseMessage = response;
      this._responseText = body;
      this._errorMessage = err ? err.message : null;

      BungieNet.logger.log("debug", "HTTP Response", {
        frameId: this._frame.id,
        error: this._errorMessage,
        response,
        body
      });

      if(err || response.statusCode !== HttpStatus.OK) {
        await this._httpFail();
      }
      else {
        await this._httpSuccess();
      }

    });

  }

}

/**
 * Events generated by a PlatformRequest instance
 * @type {Object}
 */
PlatformRequest.events = {

  beforeSend: "beforeSend",

  httpSuccess: "httpSuccess",
  httpFail: "httpFail",
  httpDone: "httpDone",

  responseParsed: "responseParsed",
  responseCorrupt: "responseCorrupt",

  success: "success",
  error: "error",
  done: "done"

};
