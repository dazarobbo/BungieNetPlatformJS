"use strict";

import BungieNet from "./BungieNet.js";
import EventEmitter from "events";
import request from "request";
import requestDebug from "request-debug";
import Response from "./Response";

/**
 * This class does NOT represent a response from bungie.net. This class exists
 * to handle the workflow between making a request and receiving a response.
 */
export default class PlatformRequest extends EventEmitter {

  /**
   * @param {Platform.Frame} frame
   */
  constructor(frame) {

    super();

    requestDebug(request, this._networkDebug);

    /**
     * @type {Platform.Frame}
     */
    this._frame = frame;

    /**
     * request {@link https://github.com/request/request#requestoptions-callback|options}
     * These are applied immediately prior to the request occurring
     * @type {Object}
     */
    this._options = {
      headers: { }
    };

    /**
     * @type {http.IncomingMessage}
     */
    this._responseMessage = null;

    /**
     * @type {String}
     */
    this._responseText = null;

  }

  get frame() {
    return this._frame;
  }

  get options() {
    return this._options;
  }

  _networkDebug(type, data, r) {
    BungieNet.logger.log("verbose", type, data);
  }

  _beforeSend() {
    this.emit(PlatformRequest.events.beforeSend, {
      target: this
    });
    return Promise.resolve();
  }

  _httpSuccess() {
    return new Promise(resolve => {

      BungieNet.logger.log("info", "HTTP Success", {
        frameId: this._frame.id,
        status: this._responseMessage.statusCode
      });

      this.emit(PlatformRequest.events.httpSuccess, {
        target: this
      });

      return this._onHttpSuccess()
        .then(() => resolve());

    });
  }

  _httpFail() {
    BungieNet.logger.log("warn", "HTTP Failed", {
      frameId: this._frame.id,
      status: this._responseMessage.statusCode
    });
    this.emit(PlatformRequest.events.httpFail, {
      target: this
    });
    return Promise.resolve();
  }

  _onHttpDone() {
    this.emit(PlatformRequest.events.httpDone, {
      target: this
    });
    return Promise.resolve();
  }

  _onHttpSuccess() {
    return new Promise(resolve => {
      Response
        .parse(this._responseText)
        .then((r) => this._onResponseParsed(r), () => this._onResponseCorrupt())
        .then(() => resolve());
    });
  }

  _onResponseParsed(response) {
    return new Promise(resolve => {

      this.frame.response = response;

      this.emit(PlatformRequest.events.responseParsed, {
        target: this
      });

      this._success()
        .then(() => this._done());

    });
  }

  _onResponseCorrupt() {
    return new Promise(resolve => {
      this._error()
        .then(() => this._done())
        .then(() => resolve());
    });
  }

  _error() {
    this.emit(PlatformRequest.events.error, {
      target: this
    });
    return Promise.resolve();
  }

  _success() {
    this.emit(PlatformRequest.events.success, {
      target: this
    });
    return Promise.resolve();
  }

  _done() {
    this.emit(PlatformRequest.events.done, {
      target: this
    });
    return Promise.resolve();
  }

  __internalBind() {

    //bind all information to the _options object
    this._options.uri = this._frame.request.uri.toString();
    this._options.method = this._frame.request.method;
    this._options.body = this._frame.request.data;

    //copy anything not in _options.headers to _options.headers
    //TODO: prefer event callbacks rather than this property
    Object.assign(this._options.headers, this._frame.request.headers);

  }

  execute() {
    this._beforeSend().then(() => {

      this.__internalBind();

      BungieNet.logger.log("info", "Executing request", {
        frameId: this._frame.id,
        line: `${this._options.method} ${this._options.uri}`
      });

      request(this._options, (err, response, body) => {

        this._responseMessage = response;
        this._responseText = body;

        if(err || response.statusCode !== 200) {
          return this._httpFail()
            .then(() => this._onHttpDone())
            .then(() => this._error())
            .then(() => this._done());
        }

        return this._httpSuccess()
          .then(() => this._onHttpDone())
          .then(() => this._onHttpSuccess());

      });

    });
  }

};

/**
 * Events generated by a PlatformRequest instance
 * @type {Object}
 */
PlatformRequest.events = {

  beforeSend: "beforeSend",

  httpSuccess: "httpSuccess",
  httpFail: "httpFail",
  httpDone: "httpDone",

  responseParsed: "responseParsed",

  success: "success",
  error: "error",
  done: "done"

};
